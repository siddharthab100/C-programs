// qsort() sorts array of any type as long as it gets a function that can compare two items
// first example :- sort an int array
#include<stdio.h>
#include<stdlib.h>
int compar(const void* , const void* );
void main()
{ int a[6] = {3,2,7,-1,6,-4};
qsort(a,6,sizeof(int), compar);
for(int i=0; i<6; i++)
{printf("%d", a[i]);
}
}
int compar(const void *x, const void* y)
{ const int *p=x;
const int *q=y;
if(*p> *q)
 return 1;
if(*p<*q)
return -1;
return 0;
}
// while we are at it lets sort strings

#include<stdio.h>
#include<stdlib.h>
int compar(const void *x[7], const void *y[7] ) // wrong! this is array of voids
{ const char * p[7]= x; //
const char * q[7]= y;
int i=0;
while((*p)[i]!= '\0' )
{ if((*p)[i] > (*q)[i]))
 return 1;
 else if((*p)[i] < (*q)[i]))
 return -1;
i++;
}
if( (*q)[i]!= '\0')
{return -1;
}
return 0;
}

void main()
{ char str[6][7]= {"buko", "bobo", "arti", "toni", "pauli", "chris" };
qsort(str, 6, 7, compar);
for(int i=0; i<6;i++)
{printf("%s", str[i]);
}
}


#include<stdio.h>
#include<stdlib.h>
int compar(const void *x, const void *y )
{ const char  *p= x;
const char  *q= y;
int i=0;
while(p[i]!= '\0' )
{ if(p[i] > q[i])
 return 1;
 else if(p[i] < q[i])
 return -1;
i++;
}
if( q[i]!= '\0')
{return -1;
}
return 0;
}

void main()
{ char str[6][7]= {"buko", "bobo", "arti", "toni", "pauli", "chris" };
qsort(str, 6, 7, compar);
for(int i=0; i<6;i++)
{printf("%s\n", str[i]);
}
}
